{
    "contents" : "##    RTCGA package for R\n##\n#' @title Merge Clinical data with genes' Mutations and Expressions data\n#'\n#' @description \\code{mergeTCGA} enables to \n#' \n#' @param clinicalDir A directory to a \\code{cancerType.clin.merged.txt} file. \n#' \\code{cancerType} might be \\code{BRCA, OV} etc. Can be checked using \\link{infoTCGA} function.\n#' @param rnaseqDir A directory to a \\code{cancerType.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.data.txt} file,\n#' which is a set with gene's Expressions.\n#' @param mutationDir A directory to a \\code{Mutation_Packager_Calls.Level} folder where are genes' Mutations files.\n#' @param genes For \\code{rnaseqDir} - which genes' expressions to merge with clinical data in \\code{clinicalDir}. For \\code{mutationDir} which\n#' gene's mutations to merge with clinical data in \\code{clinicalDir}.\n#' @param columnName A character specifing which column to extract from \\code{Mutations} data for a gene passes to \\code{genes} parameter.\n#' Works only when \\code{mutationDir} was used.\n#' \n#' \n#' @return A \\code{cancerType.clin.merged.txt} file is updated with newline containing informations about genes\n#' passed to \\code{genes} argument.\n#' \n#' @note Original \\code{cancerType.clin.merged.txt} file will be changed after performing merge operation.\n#' \n#' Only one of \\code{rnaseqDir} and \\code{mutationDir} can be used at a time.\n#' \n#' @family RTCGA\n#' @rdname mergeTCGA\n#' @export\nmergeTCGA <- function( clinicalDir, rnaseqDir = NULL, mutationDir = NULL, genes, columnName = \"Variant_Classification\" ){\n   assert_that( is.character( genes ) )\n   assert_that( is.character( clinicalDir ) )\n   assert_that( xor( is.character( rnaseqDir ), is.character( mutationDir ) ) )        \n   assert_that( xor( is.null( rnaseqDir ), is.null( mutationDir ) ) ) \n   \n   if( is.null( rnaseqDir ) && is.character( mutationDir ) ) \n      mergeTCGA_clinical_mutations( clinicalDir = clinicalDir,\n                                    mutationDir = mutationDir,\n                                    genes = genes,\n                                    columnName = columnName )\n   \n   if( is.character( rnaseqDir ) && is.null( mutationDir ) ) \n      mergeTCGA_clinical_rnaseq( clinicalDir = clinicalDir,\n                                 rnaseqDir = rnaseqDir,\n                                 genes = genes )\n}\n\n\n\n\nmergeTCGA_clinical_rnaseq <- function( clinicalDir, rnaseqDir,\n                                       genes = c(\"MDM2\") ){\n   \n   assert_that( is.character(clinicalDir) & length(clinicalDir) == 1)\n   assert_that( is.character(rnaseqDir) & length(rnaseqDir) == 1)\n   assert_that( is.character(genes) & length(genes) > 0)\n   \n   rnaseqv2 <- fread( rnaseqDir )\n   \n   \n   # in case column names are not unique :| \n   # mb they are uniqe\n   rnaseqv2 <- rnaseqv2[,unique(names(rnaseqv2)),with=FALSE]\n   \n   rnaseqv2 %>% setnames( x=.,\n                          old = names(rnaseqv2), \n                          new =  c(\"HybridizationREF\", \n                                   gsub(  \".\", #if a column name has \".\" instead of \"-\"\n                                          \"-\", # mb there isn't such any\n                                          names(rnaseqv2)[-1],\n                                          fixed = TRUE)\n                          ) %>%\n                             substr(1,12) )\n   \n   realGenesNames <- genes %>% sapply( function(element) \n   {grep( pattern = element, \n          x = rnaseqv2[[1]], \n          value = TRUE ) }) %>%\n      unlist( )\n   \n   \n   \n   \n   rnaseqv2_short <-  rnaseqv2 %>%\n      filter( Hybridizatio %in% realGenesNames )\n   \n   \n   clin.merged <- getPatientsBarcodes( clinicalDir )\n   \n   \n   \n   \n   #     patientsOrder <- clin.merged[,1] %>%\n   #         sapply( function(element){\n   #             grep( x = names(rnaseqv2)[-1], pattern = element, value = TRUE)[1]\n   #         })\n   \n   #sum(is.na(patientsOrder))\n   \n   rnaseqv2_short_frame <- cbind( data.frame( barcode = names(rnaseqv2_short), \n                                              stringsAsFactors = FALSE ),\n                                  as.data.frame(t(rnaseqv2_short))) \n   # need to remove warning somehow\n   \n   joinedFrames <- left_join(clin.merged, rnaseqv2_short_frame[-1,], by = \"barcode\") \n   # ok rows are copied now... so we need to remove some of them \n   \n   joinedFrames <- unique( data.table(joinedFrames), by = \"barcode\" )\n   \n   for( i in 1:(ncol(joinedFrames)-1)){\n      \n      write.table( file = clinicalDir, \n                   append = TRUE, \n                   x = strsplit(c(as.character(rnaseqv2_short_frame[1,i+1]), \n                                  as.character(joinedFrames[[i+1]])), \n                                split = \"\\t\"),\n                   col.names = FALSE,\n                   row.names = FALSE,\n                   quote = FALSE, \n                   sep = \"\\t\"\n      )\n      \n   }    \n   \n}\n\n# #' @family RTCGA\n# #' @rdname mergeTCGA\n# #' @export\n# prepareTCGA_mutations_for_merging <- function( clinicalDir, mutationDir ){\n#     assert_that( is.character(clinicalDir) & length(clinicalDir) == 1)\n#     assert_that( is.character(mutationDir) & length(mutationDir) == 1)\n#     \n#     mutationDir <- checkDirectory( mutationDir )\n#     \n#     #genesNames <- availableGenesNames(rnaseqDir)\n#     \n#     clin.merged <- getPatientsBarcodes( clinicalDir )\n#     \n#     clin.merged[, 1] <- clin.merged[, 1] %>% \n#         paste0( \"-01\")\n#     \n#     filesForExistingBARCODES <- clin.merged[, 1] %>%\n#         sapply( function(element){\n#             grep( pattern = element,\n#                   x = list.files( mutationDir ),\n#                   value = TRUE )\n#         } ) %>%\n#         unlist()\n#     \n#     genesNames <- filesForExistingBARCODES %>%\n#         sapply( function(element){\n#             fread( paste0(mutationDir, element), \n#                    select = c(1), \n#                    skip = 1, sep = \"\\t\")\n#         }) %>%\n#         unlist() %>%\n#         unique()\n#         \n#     genesNames <- sort( genesNames )\n#     \n#     mergedMutations <- data.frame(  patient.bcr_patient_barcode = as.character( genesNames ), \n#                                     stringsAsFactors =  FALSE )\n#     \n#     file.create( paste0(mutationDir, \"preparedForMerging.txt\"))\n#     \n#     write.table( strsplit( mergedMutations[, 1], split = \"\\t\"), \n#                 file = paste0(mutationDir, \"preparedForMerging.txt\"),\n#                 quote = FALSE,\n#                 row.names = TRUE,\n#                 col.names = FALSE,\n#                 sep = \"\\t\"\n#     )\n#     \n#     \n#     # then do this for every file:\n#     # join with genes names\n#     # and write to a preparedForMerging.txt\n#     \n# #     mergedMutations %>%\n# #         setnames( \"Variant_Classification\",\n# #                   names(filesForExistingBARCODES[1])\n# #         )\n#     how_many_files <- length(filesForExistingBARCODES)\n#     for( i in seq_along(filesForExistingBARCODES) ){\n#         \n#         \n#         mergedMutationsToAdd <- fread( paste0( mutationDir,\n#                                           filesForExistingBARCODES[i] ), \n#                                   select= c(1,9) )\n#         mergedMutationsToAdd %>% \n#             setnames( \"Variant_Classification\",\n#                       names(filesForExistingBARCODES[i])\n#             )\n#         mergedMutations <- full_join(mergedMutations,\n#                                       mergedMutationsToAdd,\n#                                       by=\"Hugo_Symbol\")    \n#         cat( \"\\r Merged \", i, \" out of \", how_many_files, \" used files.\")\n#     }\n#     \n#     \n#     file.create( paste0(mutationDir, \"preparedForMerging.txt\"))\n#     write.table(mergedMutations, \n#                 file = paste0(mutationDir, \"preparedForMerging.txt\"),\n#                 quote = FALSE,\n#                 row.names = FALSE,\n#                 col.names = TRUE,\n#                 sep = \"\\t\"\n#                 )\n#     \n#     cat( \"\\n Data prepared for merging using mergeTCGA_clinical_mutations were saved in a file\", paste0(mutationDir, \"preparedForMerging.txt\"))\n#     return( paste0(mutationDir, \"preparedForMerging.txt\") )\n# }\n\n\nmergeTCGA_clinical_mutations <- function( clinicalDir, mutationDir,\n                                          genes = \"TP53\", columnName = \"Variant_Classification\" ){\n   assert_that( is.character(clinicalDir) & length(clinicalDir) == 1)\n   assert_that( is.character(mutationDir) & length(mutationDir) == 1)\n   assert_that( is.character(genes) & length(genes) == 1)\n   assert_that( is.character(columnName) & length(columnName) == 1)\n   \n   #to be fixed :)\n   gene <- genes\n   \n   mutationDir <- checkDirectory( mutationDir )\n   \n   clin.merged <- getPatientsBarcodes( clinicalDir )\n   \n   \n   \n   MutationfilesName <-list.files( mutationDir )\n   \n   genesAndVariants <- clin.merged[, 1] %>%\n      sapply( function(element){\n         fileDir <- grep( element,\n                          MutationfilesName,\n                          value = TRUE)[1] \n         if( !is.na(fileDir) ){\n            fread( paste0(mutationDir,fileDir) ) %>%\n               as.data.frame( ) %>%\n               filter( Hugo_Symbol %in% gene ) %>%\n               select_( columnName )\n         }else{\n            return(\"NA\")\n         }\n      }) %>% \n      unlist()\n   \n   \n   write.table( file = clinicalDir, \n                append = TRUE, \n                x = strsplit( c(as.character( gene ), \n                                genesAndVariants ), split = \"\\t\"),\n                col.names = FALSE,\n                row.names = FALSE,\n                quote = FALSE, \n                sep = \"\\t\"\n   )\n   \n   \n}\n\n\n\n\n\n\n\ngetPatientsBarcodes <- function( clinicalDir ){\n   \n   clin.merged <- read.delim( clinicalDir ) %>% # fread error\n      filter( .[,1] == \"patient.bcr_patient_barcode\" ) \n   clin.merged <- clin.merged %>%\n      sapply( toupper) %>%\n      data.frame( barcode = . ) \n   clin.merged <- clin.merged[-1,1] %>%\n      as.data.frame( .,\n                     stringsAsFactors = FALSE )\n   names(clin.merged) <- \"barcode\"\n   return(clin.merged)\n   \n}\n\n# md <- data.frame(barcode = toupper(sapply(a[,-1], as.character)))\n\n\n# gdy nie dopisalo sie danych z rnaseq to wykonywalo sie poprawnie,\n# jednak pozniej wystapil taki blad:\n# mozliwe, ze write.tables musi sie oknczyc albo zaczynac specjalnym znakiem\n",
    "created" : 1431861808163.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2590602986",
    "id" : "BD8A5B7F",
    "lastKnownWriteTime" : 1431862198,
    "path" : "D:/GitHub/RTCGA/R/mergeTCGA.R",
    "project_path" : "R/mergeTCGA.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}