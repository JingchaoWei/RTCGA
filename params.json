{"name":"RTCGA","tagline":"RTCGA package offers download and integration of the variety and volume of TCGA data using patient barcode key, what enables easier data possession.","body":"# Mission\r\n\r\nThe Cancer Genome Atlas (TCGA) Data Portal provides a platform for researchers to search, download, and analyze data sets generated by TCGA. It contains clinical information, genomic characterization data, and high level sequence analysis of the tumor genomes[1]. The key is to understand genomics to improve cancer care. \r\n\r\nRTCGA package offers download and integration of the variety and volume of TCGA data using patient barcode key, what enables easier data possession. This may have an benefcial infuence on impact on development of science and improvement of patients' treatment. RTCGA is an open-source R package, available to download from Bioconductor[2]. Furthermore, RTCGA package transforms TCGA data to form which is convenient to use in R statistical package. Those data transformations can be a part of statistical analysis pipeline which can be more reproducible with RTCGA.\r\n\r\n# RTCGA\r\n\r\nProject is (will be) supported by [Travis CI](https://travis-ci.org/) and [waffle.io](https://waffle.io/).\r\n\r\n<h5> Installation of the RTCGA package: </h5>\r\nTo get started, install the latest version of **RTCGA** from Bioconductor:\r\n```{Ruby}\r\n# not there yet\r\n```\r\nor use:\r\n```{Ruby}\r\nif (!require(devtools)) {\r\n    install.packages(\"devtools\")\r\n    require(devtools)\r\n}\r\ninstall_github(\"MarcinKosinski/RTCGA\")\r\n```\r\nMake sure you have [rtools](http://cran.r-project.org/bin/windows/Rtools/) installed on your computer.\r\n\r\n<h5> The list of available functions: </h5>\r\n```{Ruby}\r\nhelp(package=\"RTCGA\")\r\n```\r\n\r\n**To run examples below use those packages**\r\n```{Ruby}\r\nlibrary(RTCGA)\r\nlibrary(dplyr)\r\n```\r\n\r\n<h5> Information about available TCGA data:</h5>\r\n```{Ruby}\r\ninfoTCGA()\r\n```\r\n\r\n<h5> Cohorts names:</h5>\r\n```{Ruby}\r\n(cohorts <- infoTCGA() %>% \r\n   names() %>% \r\n   sub(\"-counts\", \"\", x=.))\r\n```\r\n\r\nCohorts codes are explained here: [http://gdac.broadinstitute.org/](http://gdac.broadinstitute.org/).\r\n\r\n<h5> Dates of reales: </h5>\r\n```{Ruby}\r\navailableDates()\r\n```\r\nIt is always save to use almost the last date, because sometimes data from the newest date are not available in 100%. So that's why I suggest using such date:\r\n```{Ruby}\r\ndate <- tail( availableDates(), 2 )[1]\r\n```\r\n\r\n<h3> Clinical data</h3>\r\nCan be downloaded using default settings. By default the dataset is downloaded from the newest available date of TCGA releases.\r\n\r\n```{Ruby}\r\n#dir.create( \"data\" )\r\ndownloadTCGA( cancerTypes = cohorts, destDir = \"data/\", date = date )\r\n```\r\n<h3> Mutations data</h3>\r\nLet us check if there are Mutations data available for all canser types.\r\n\r\n```{Ruby}\r\ncheckDataSetsAvailability( cohorts, \r\n                           pattern = \"Mutation_Packager_Calls.Level\", \r\n                           date = date) %>%\r\n   unlist() %>% \r\n   cat( sep=\"\\n\")\r\n```\r\nLet us download them.\r\n```{Ruby}\r\nsapply( cohorts, function(element){\r\n   tryCatch({\r\n      downloadTCGA( cancerTypes = element, \r\n                    dataSet = \"Mutation_Packager_Calls.Level\",\r\n                    destDir = \"data/\", \r\n                    date = date )},\r\n      error = function(cond){\r\n         cat(\"Error: Maybe there weren't mutations data for \", element, \" cancer.\\n\")\r\n   })\r\n})\r\n```\r\n<h3> Genes expressions - RNA-Seq data </h3>\r\nLet us check if there are RNA-Seq data available for all canser types.\r\n```{Ruby}\r\ncheckDataSetsAvailability( cohorts,\r\n                        \"rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.Level\",\r\n                        date = date ) %>%\r\n   unlist() %>%  \r\n   cat( sep=\"\\n\")\r\n```\r\n\r\nLet us download them.\r\n```{Ruby}\r\nsapply( cohorts, function(element){\r\n   tryCatch({\r\n      downloadTCGA( cancerTypes = element, \r\n                    dataSet = \"rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.Level\",\r\n                    destDir = \"data/\", \r\n                    date = date )},\r\n      error = function(cond){\r\n         cat(\"Error: Maybe there weren't rnaseq data for \", element, \" cancer.\\n\")\r\n   })\r\n}) \r\n```\r\n\r\n\r\n<h3> Untarring data </h3>\r\n\r\nLetâ€™s use `untar()` function to untar all downloaded sets.\r\n```{Ruby}\r\nlist.files( \"data/\") %>% \r\n   paste0( \"data/\", .) %>%\r\n   sapply( untar, exdir = \"data/\" )\r\n```\r\n\r\n<h3> Removing no longer needed `tar.gz` files </h3>\r\n\r\nAfter datasets are untarred, the `tar.gz` files ar no longer needed and can be deleted.\r\n```{Ruby}\r\nlist.files( \"data/\") %>% \r\n   paste0( \"data/\", .) %>%\r\n   grep( pattern = \"tar.gz\", x = ., value = TRUE) %>%\r\n   sapply( file.remove )\r\n```\r\n\r\n\r\n<h4> The list of use-cases: </h4>\r\n\r\nTODO.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}